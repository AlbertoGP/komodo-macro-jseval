{
  "keyboard_shortcut": "Ctrl+Alt+Return", 
  "name": "jseval", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "// == Loggers", 
    "var log, console;", 
    "(function(){", 
    "\tlog = function(){", 
    "\t\tlogger.apply(null, arguments);", 
    "\t};", 
    "\t", 
    "\tconsole = {", 
    "\t\tlog: function(){", 
    "\t\t\tconsoleLogger.apply(null, arguments);", 
    "\t\t\tlogger = consoleLogger;", 
    "\t\t}", 
    "\t};", 
    "\t", 
    "\t// private", 
    "\t", 
    "\tvar logger = toolbarLogger;", 
    "\tfunction toolbarLogger(){", 
    "        ko.run.runEncodedCommand(window, 'echo ' + formatMsg(arguments));", 
    "\t}", 
    "\tfunction consoleLogger(){", 
    "\t\tvar service = Components", 
    "\t\t\t.classes[\"@mozilla.org/consoleservice;1\"]", 
    "\t\t\t.getService(Components.interfaces.nsIConsoleService)", 
    "\t\t\t;", 
    "\t\tservice.reset();", 
    "\t\twindow.openDialog('chrome://global/content/console.xul', '_blank');", 
    "\t\tconsoleLogger = function(){", 
    "\t\t\tservice.logStringMessage(formatMsg(arguments));", 
    "\t\t};", 
    "\t\tconsoleLogger.apply(null, arguments);", 
    "\t}", 
    "\tfunction formatMsg(args){", 
    "\t\tvar msg = '',", 
    "\t\t\timax = args.length,", 
    "\t\t\ti = -1;", 
    "\t\twhile ( ++i < imax ) {", 
    "\t\t\tmsg += args[i] + ' ';", 
    "\t\t}", 
    "\t\treturn msg;", 
    "\t}", 
    "}());", 
    "", 
    "", 
    "", 
    "// === scimoz utils", 
    "", 
    "var scimoz_getSelection,", 
    "\tscimoz_getLine,", 
    "\tscimoz_replaceSelection,", 
    "\tscimoz_replace", 
    "(function(){", 
    "\tscimoz_getSelection = function(){", 
    "\t\treturn scimoz.selText;", 
    "\t};", 
    "\tscimoz_replaceSelection = function(str){", 
    "\t\tif (str == null) ", 
    "\t\t\treturn;", 
    "\t\t", 
    "\t\tscimoz.beginUndoAction();", 
    "\t\tscimoz.replaceSel(str);", 
    "\t\tscimoz.endUndoAction();", 
    "\t};", 
    "\t", 
    "\t/* { start, end, string, position }*/", 
    "\tscimoz_replace = function(meta){", 
    "\t\tscimoz.targetStart = __start + meta.start;", 
    "\t\tscimoz.targetEnd = __start + meta.end;", 
    "\t\tscimoz.replaceTarget(meta.string.length, meta.string);", 
    "\t\tscimoz.gotoPos(__start + meta.position);", 
    "\t};", 
    "\t", 
    "\tscimoz_getLine = function(){", 
    "\t\tvar pos = scimoz.currentPos;", 
    "\t\t__start = pos < 40 ? 0 : pos - 40;", 
    "\t\t", 
    "        return scimoz.getTextRange(__start, pos);", 
    "\t};", 
    "\t", 
    "\tvar view = ko.views.manager.currentView,", 
    "\t\tscimoz = view.scimoz,", 
    "\t\t", 
    "\t\t// current text block start position", 
    "\t\t__start = 0;", 
    "}());", 
    "\t", 
    "var str_format;", 
    "(function(){", 
    "\tstr_format =  function() {", 
    "\t\tvar args = Array.prototype.slice.call(arguments),", 
    "\t\t\tline = args.shift();", 
    "\t\tfor (var i = 0; i < args.length; i++) {", 
    "\t\t\tline = line.split('%' + (i + 1)).join(args[i]);", 
    "\t\t}", 
    "\t\treturn line;", 
    "\t};", 
    "}());", 
    "", 
    "// === snippets", 
    "", 
    "var snippet_tryRun;", 
    "(function(){", 
    "\tsnippet_tryRun = function(str){", 
    "\t\tvar imax = snippets.length,", 
    "\t\t\ti = -1,", 
    "\t\t\tsnippet;", 
    "\t\t\t", 
    "\t\twhile ( ++i < imax ) {", 
    "\t\t\tsnippet = snippets[i];", 
    "\t\t\tif (snippet.regexp.test(str) == false)", 
    "\t\t\t\tcontinue;", 
    "\t\t\t", 
    "\t\t\t", 
    "\t\t\tvar replaceMeta = snippet.eval(str);", 
    "\t ", 
    "\t\t\tscimoz_replace(replaceMeta);", 
    "\t\t\treturn true;", 
    "\t\t}", 
    "\t\treturn false;", 
    "\t};", 
    "\t", 
    "\tvar snippets = [", 
    "\t\t/** (arg?,arg?) -> function(arg,arg){} */", 
    "\t\t{ ", 
    "\t\t\tregexp: /(\\([\\w,\\$_ ]*)$/g,", 
    "\t\t\teval: function(line) {", 
    "\t\t\t\tvar start = line.lastIndexOf('('),", 
    "\t\t\t\t\tend = line.length,", 
    "\t\t\t\t\targs = line.substring(start + 1, end).replace(' ', '').split(',').join(', ');", 
    "\t ", 
    "\t\t\t\treturn createReplaceObject(", 
    "\t\t\t\t\tstr_format('function(%1){}', args)", 
    "\t\t\t\t\t, start", 
    "\t\t\t\t\t, end + 1", 
    "\t\t\t\t\t, -1", 
    "\t\t\t\t);", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t},", 
    "\t\t", 
    "\t\t/** obj!.value -> (obj.value || (obj.value = ?)) */", 
    "\t\t{ ", 
    "\t\t\tregexp: /([\\w]+!\\.[\\w]+)$/g,", 
    "\t\t\teval: function(line, output) {", 
    "\t\t\t\tvar match = /([\\w]+)!\\.(\\w+)$/.exec(line),", 
    "\t\t\t\t\tobj = match[1],", 
    "\t\t\t\t\tkey = match[2];", 
    "\t ", 
    "\t\t\t\treturn createReplaceObject(", 
    "\t\t\t\t\tstr_format(';(%1.%2 || (%1.%2 = ))', obj, key)", 
    "\t\t\t\t\t, match.index", 
    "\t\t\t\t\t, line.length", 
    "\t\t\t\t\t, -2", 
    "\t\t\t\t);", 
    "\t\t\t}", 
    "\t\t},", 
    "\t\t/** obj?.value -> obj && obj.value */", 
    "\t\t{", 
    "\t\t\tregexp: /([\\w$_]+\\??\\.)*([\\w$_]+\\??)(=)*$/,", 
    "\t\t\teval: function(line) {", 
    "\t\t\t\tvar match = this.regexp.exec(line),", 
    "\t\t\t\t\tregexp = /[\\w]+\\??\\.?/g,", 
    "\t\t\t\t\ttype = match[3],", 
    "\t\t\t\t\t// setter('=') || getter('')", 
    "\t\t\t\t\tstr = '',", 
    "\t\t\t\t\tchain = '',", 
    "\t\t\t\t\tparts = (", 
    "\t\t\t\t\t\ttype", 
    "\t\t\t\t\t\t\t? match[0].substring(0, match[0].length - type.length)", 
    "\t\t\t\t\t\t\t: match[0]", 
    "\t\t\t\t\t).split('.');", 
    "\t ", 
    "\t\t\t\tvar imax = parts.length,", 
    "\t\t\t\t\ti = -1,", 
    "\t\t\t\t\tx, isSafe, seperator;", 
    "\t\t\t\twhile ( ++i < imax ){", 
    "\t\t\t\t\tx = parts[i];", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tisSafe = x[x.length - 1] == '?';", 
    "\t\t\t\t\tif (isSafe)", 
    "\t\t\t\t\t\tx = x.replace('?', '');", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\tchain += (chain.length ? '.' : '') + x;", 
    "\t ", 
    "\t\t\t\t\tseperator = str.length ? '.' : '';", 
    "\t\t\t\t\tstr += seperator + x + (isSafe ? ' && ' + chain : '');", 
    "\t\t\t\t\tif (i == imax - 1) {", 
    "\t\t\t\t\t\tif (type == '=') {", 
    "\t\t\t\t\t\t\tvar index = str.lastIndexOf(' ');", 
    "\t\t\t\t\t\t\tif (~index) {", 
    "\t\t\t\t\t\t\t\tstr = str.substring(0, ++index) + '(' + str.substring(index);", 
    "\t\t\t\t\t\t\t}", 
    "\t\t\t\t\t\t\tstr += ' = )';", 
    "\t\t\t\t\t\t}", 
    "\t\t\t\t\t\tstr += ';';", 
    "\t\t\t\t\t}", 
    "\t\t\t\t}", 
    "\t\t\t\treturn createReplaceObject(", 
    "\t\t\t\t\tstr", 
    "\t\t\t\t\t, match.index", 
    "\t\t\t\t\t, line.length", 
    "\t\t\t\t\t, type == '=' ? -2 : -1", 
    "\t\t\t\t);", 
    "\t\t\t}", 
    "\t\t}", 
    "\t];", 
    "\t", 
    "\tfunction createReplaceObject(str, start, end, pos) {", 
    "\t\t", 
    "\t\tvar output = {", 
    "\t\t\tstart: start,", 
    "\t\t\tend: end,", 
    "\t\t\tposition: start + str.length + pos,", 
    "\t\t\tstring: str", 
    "\t\t};", 
    "\t\treturn output;", 
    "\t}", 
    "}());", 
    "", 
    "", 
    "function main(){", 
    "\t", 
    "\tvar selection = scimoz_getSelection();", 
    "\tif (selection) {", 
    "\t\t// evaluate selection", 
    "\t\ttry {", 
    "\t\t   scimoz_replaceSelection(eval(selection));", 
    "\t\t} catch (e) {", 
    "\t\t   log('Error:: ' + e);", 
    "\t\t}", 
    "\t\treturn;", 
    "\t}", 
    "\t", 
    "\t// try snippet", 
    "\tvar str = scimoz_getLine();", 
    "\tif (str === '') {", 
    "\t\tlog('Empty line under cursor');", 
    "\t\treturn;", 
    "\t}", 
    "\t", 
    "\tsnippet_tryRun(str);", 
    "}", 
    "", 
    "", 
    "", 
    "// ==== RUN", 
    "", 
    "main();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": 1, 
  "type": "macro", 
  "trigger": "trigger_postopen"
}